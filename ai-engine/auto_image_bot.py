import os
from PIL import Image, ImageDraw, ImageFont
import datetime
import random
import subprocess
import traceback

# ЁЯза Emotionally Powerful Hindi Slogans for JeevMitra
slogans = [
    "рдкрдВрдЫрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рдкрд╛рдиреА рдХрд╛ рдкреНрдпрд╛рд▓рд╛ рд░рдЦреЛ ЁЯРж",
    "рдПрдХ рдЬрд╛рдирд╡рд░ рдХреА рдореБрд╕реНрдХрд╛рди, рдЖрдкрдХреА рдореЗрд╣рд░рдмрд╛рдиреА рд╕реЗ ЁЯШЗ",
    "рдЬреАрд╡реЛрдВ рдХреА рд╕реЗрд╡рд╛, рд╕рдЪреНрдЪреА рднрдХреНрддрд┐ ЁЯХКя╕П",
    "рдЫрд╛рдпрд╛, рдкрд╛рдиреА, рдФрд░ рдкреНрдпрд╛рд░ тАУ рдпрд╣реА рдЬреАрд╡рди рд╣реИ тЭдя╕П",
    "рдкреНрд░рдХреГрддрд┐ рдХреА рд░рдХреНрд╖рд╛ рдХрд░реЛ, рдкрд╢реБ-рдкрдХреНрд╖реА рддреБрдореНрд╣рд╛рд░реЗ рдЕрдкрдиреЗ рд╣реИрдВ ЁЯМ┐",
    "рдЬреЛ рдЬреАрд╡реЛрдВ рд╕реЗ рдкреНрд░реЗрдо рдХрд░рддрд╛ рд╣реИ, рд╡рд╣реА рд╕рдЪреНрдЪрд╛ рдорд╛рдирд╡ рд╣реИ ЁЯЩП",
    "рдХреБрддреНрддреЛрдВ рдХрд╛ рд╕рд╛рде, рднрдЧрд╡рд╛рди рдХрд╛ рдЖрд╢реАрд░реНрд╡рд╛рдж ЁЯР╛",
    "рд╣рд░ рдЬреАрд╡рди рдХреАрдорддреА рд╣реИ тАУ рдЗрдВрд╕рд╛рди рд╣реЛ рдпрд╛ рдЬрд╛рдирд╡рд░ ЁЯТз",
    "рдкрд╢реБ рд╕реЗрд╡рд╛ рд╣реА рдкрд░рдо рд╕реЗрд╡рд╛ рд╣реИ ЁЯЪй",
    "рджрдпрд╛ рдХрд╛ рджреВрд╕рд░рд╛ рдирд╛рдо тАУ JeevMitra ЁЯдЭ"
]

def overlay_slogan(image_path, slogan):
    try:
        img = Image.open(image_path).convert("RGBA")
        txt_layer = Image.new("RGBA", img.size, (255,255,255,0))
        draw = ImageDraw.Draw(txt_layer)

        font_size = int(min(img.size)/15)
        try:
            font = ImageFont.truetype("arial.ttf", font_size)
        except:
            font = ImageFont.load_default()

        text_width, text_height = draw.textsize(slogan, font=font)
        x = (img.width - text_width) / 2
        y = img.height - text_height - 30

        # Shadow + Main text
        draw.text((x+2, y+2), slogan, font=font, fill=(0,0,0,180))
        draw.text((x, y), slogan, font=font, fill=(255,255,255,255))

        out = Image.alpha_composite(img, txt_layer).convert("RGB")
        out.save(image_path)
        print(f"[тЬЕ] Processed: {image_path}")
        return True

    except Exception as e:
        print(f"[тЭМ] Error processing {image_path}: {e}")
        traceback.print_exc()
        return False

def process_all_images():
    folder = "images/ai"
    if not os.path.exists(folder):
        print("[тЫФ] Folder does not exist:", folder)
        return False

    files = [f for f in os.listdir(folder) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    if not files:
        print("[тД╣я╕П] No images found in", folder)
        return False

    any_updated = False
    for file in files:
        path = os.path.join(folder, file)
        slogan = random.choice(slogans)
        if overlay_slogan(path, slogan):
            any_updated = True

    return any_updated

def commit_and_push():
    try:
        subprocess.run(["git", "config", "--global", "user.name", "JeevMitra-AI"])
        subprocess.run(["git", "config", "--global", "user.email", "jeevmitra@bot.com"])
        subprocess.run(["git", "add", "."], check=True)
        result = subprocess.run(["git", "commit", "-m", f"ЁЯФД Auto Image Update: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"], capture_output=True, text=True)

        if "nothing to commit" in result.stdout.lower():
            print("[тД╣я╕П] No new changes to commit.")
        else:
            subprocess.run(["git", "push"], check=True)
            print("[ЁЯЪА] Changes pushed to GitHub.")

    except subprocess.CalledProcessError as e:
        print("[тЭМ] Git error:", e)
        traceback.print_exc()

if __name__ == "__main__":
    try:
        if process_all_images():
            commit_and_push()
        else:
            print("[тЫФ] No updates performed.")
    except Exception as e:
        print("[тЭМ] Fatal error occurred:", e)
        traceback.print_exc()
